
// Elevator4Dlg.cpp: 구현 파일
//

#include "pch.h"
#include "framework.h"
#include "Elevator4.h"
#include "Elevator4Dlg.h"
#include "afxdialogex.h"
#include <afxwin.h>

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CElevator4Dlg 대화 상자



CElevator4Dlg::CElevator4Dlg(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_ELEVATOR4_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CElevator4Dlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}


//---------


class CElevator : public CFrameWnd
{
public:
	CElevator()
	{
		// 윈도우 크기와 타이틀 설정
		Create(NULL, L"Elevator", WS_OVERLAPPEDWINDOW, CRect(0, 0, 200, 200));

		// 현재 층 초기화
		currentFloor = 1;

		// 버튼 생성
		btnUp.Create(L"Up", WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON, CRect(50, 50, 100, 70), this, 1);
		btnDown.Create(L"Down", WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON, CRect(50, 100, 100, 120), this, 2);
	}

	// 엘리베이터 이동 함수
	void Move(int destFloor)
	{
		if (destFloor == currentFloor) // 이미 해당 층에 도착한 경우
		{
			return;
		}

		// 목적지 층과 현재 층을 비교하여 엘리베이터 방향 설정
		if (destFloor > currentFloor)
		{
			direction = 1; // 위로 이동
		}
		else
		{
			direction = -1; // 아래로 이동
		}

		// 목적지 층까지 엘리베이터 이동
		while (currentFloor != destFloor)
		{
			currentFloor += direction;

			// 1층 또는 15층 이상인 경우 방향 전환
			if (currentFloor == 1 || currentFloor == 15)
			{
				direction *= -1;
			}
		}

		// 도착한 층 출력
		CString str;
		str.Format(L"Arrived at floor %d", currentFloor);
		AfxMessageBox(str);
	}

private:
	int currentFloor; // 현재 층
	int direction; // 엘리베이터 방향 (1: 위로, -1: 아래로)
	CButton btnUp; // 위층 버튼
	CButton btnDown; // 아래층 버튼

	// 위층 버튼 클릭 이벤트 핸들러
	afx_msg void OnUpClicked()
	{
		Move(currentFloor + 1);
	}

	// 아래층 버튼 클릭 이벤트 핸들러
	afx_msg void OnDownClicked()
	{
		Move(currentFloor - 1);
	}

	DECLARE_MESSAGE_MAP()
};

// MFC 애플리케이션 클래스
class CElevatorApp : public CWinApp
{
public:
	virtual BOOL InitInstance()
	{
		// 메인 프레임 윈도우 생성
		CElevator* pFrame = new CElevator();
		m_pMainWnd = pFrame;

		// 윈도우 표시
		pFrame->ShowWindow(SW_SHOW);
		pFrame->UpdateWindow();

		return TRUE;
	}
};


//---





BEGIN_MESSAGE_MAP(CElevator4Dlg, CDialogEx)
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
END_MESSAGE_MAP()


// CElevator4Dlg 메시지 처리기

BOOL CElevator4Dlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 이 대화 상자의 아이콘을 설정합니다.  응용 프로그램의 주 창이 대화 상자가 아닐 경우에는
	//  프레임워크가 이 작업을 자동으로 수행합니다.
	SetIcon(m_hIcon, TRUE);			// 큰 아이콘을 설정합니다.
	SetIcon(m_hIcon, FALSE);		// 작은 아이콘을 설정합니다.

	// TODO: 여기에 추가 초기화 작업을 추가합니다.

	return TRUE;  // 포커스를 컨트롤에 설정하지 않으면 TRUE를 반환합니다.
}

// 대화 상자에 최소화 단추를 추가할 경우 아이콘을 그리려면
//  아래 코드가 필요합니다.  문서/뷰 모델을 사용하는 MFC 응용 프로그램의 경우에는
//  프레임워크에서 이 작업을 자동으로 수행합니다.

void CElevator4Dlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 그리기를 위한 디바이스 컨텍스트입니다.

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 클라이언트 사각형에서 아이콘을 가운데에 맞춥니다.
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 아이콘을 그립니다.
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

// 사용자가 최소화된 창을 끄는 동안에 커서가 표시되도록 시스템에서
//  이 함수를 호출합니다.
HCURSOR CElevator4Dlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

