
// Elevator3Dlg.cpp: 구현 파일
//

#include "pch.h"
#include "framework.h"
#include "Elevator3.h"
#include "Elevator3Dlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 응용 프로그램 정보에 사용되는 CAboutDlg 대화 상자입니다.

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 대화 상자 데이터입니다.
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 지원입니다.

// 구현입니다.
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CElevator3Dlg 대화 상자



CElevator3Dlg::CElevator3Dlg(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_ELEVATOR3_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
	m_nx1_pos = 210;
	m_ny1_pos = 520;
	//m_nx2_pos = 210;
	//m_ny2_pos = 730;
	m_nCurFloor = 1;
	m_nElevator = 1;
	m_wstrX = (_T("1"));
	m_Elevator_state = Elevator_state_STOP;
}

void CElevator3Dlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_LISTBOX_MSG, m_listBoxMSG);
	DDX_Control(pDX, IDC_STC_ELEVATOR, m_stcSTDzElevator);
}

BEGIN_MESSAGE_MAP(CElevator3Dlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_WM_TIMER()
	ON_BN_CLICKED(IDC_CHK_BTN1, &CElevator3Dlg::OnBnClickedChkBtn1)
	ON_BN_CLICKED(IDC_CHK_BTN2, &CElevator3Dlg::OnBnClickedChkBtn2)
	ON_BN_CLICKED(IDC_CHK_BTN3, &CElevator3Dlg::OnBnClickedChkBtn3)
	ON_BN_CLICKED(IDC_CHK_BTN4, &CElevator3Dlg::OnBnClickedChkBtn4)
	ON_BN_CLICKED(IDC_CHK_BTN5, &CElevator3Dlg::OnBnClickedChkBtn5)
	ON_BN_CLICKED(IDC_CHK_BTN6, &CElevator3Dlg::OnBnClickedChkBtn6)
	ON_BN_CLICKED(IDC_CHK_BTN7, &CElevator3Dlg::OnBnClickedChkBtn7)
	ON_BN_CLICKED(IDC_CHK_BTN8, &CElevator3Dlg::OnBnClickedChkBtn8)
	ON_BN_CLICKED(IDC_CHK_BTN9, &CElevator3Dlg::OnBnClickedChkBtn9)
	ON_BN_CLICKED(IDC_CHK_BTN10, &CElevator3Dlg::OnBnClickedChkBtn10)
	ON_BN_CLICKED(IDC_CHK_BTN11, &CElevator3Dlg::OnBnClickedChkBtn11)
	ON_BN_CLICKED(IDC_CHK_BTN12, &CElevator3Dlg::OnBnClickedChkBtn12)
	ON_BN_CLICKED(IDC_CHK_BTN13, &CElevator3Dlg::OnBnClickedChkBtn13)
	ON_BN_CLICKED(IDC_CHK_BTN14, &CElevator3Dlg::OnBnClickedChkBtn14)
	ON_BN_CLICKED(IDC_CHK_BTN15, &CElevator3Dlg::OnBnClickedChkBtn15)
	ON_WM_CTLCOLOR()
END_MESSAGE_MAP()


// CElevator3Dlg 메시지 처리기

BOOL CElevator3Dlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 시스템 메뉴에 "정보..." 메뉴 항목을 추가합니다.

	// IDM_ABOUTBOX는 시스템 명령 범위에 있어야 합니다.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != nullptr)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 이 대화 상자의 아이콘을 설정합니다.  응용 프로그램의 주 창이 대화 상자가 아닐 경우에는
	//  프레임워크가 이 작업을 자동으로 수행합니다.
	SetIcon(m_hIcon, TRUE);			// 큰 아이콘을 설정합니다.
	SetIcon(m_hIcon, FALSE);		// 작은 아이콘을 설정합니다.

	SetTimer(_TIMER_DEQUE_ISEMPTY, 1 * 1000, NULL);

	
	
	return TRUE;  // 포커스를 컨트롤에 설정하지 않으면 TRUE를 반환합니다.
}


void CElevator3Dlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 대화 상자에 최소화 단추를 추가할 경우 아이콘을 그리려면
//  아래 코드가 필요합니다.  문서/뷰 모델을 사용하는 MFC 응용 프로그램의 경우에는
//  프레임워크에서 이 작업을 자동으로 수행합니다.

void CElevator3Dlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 그리기를 위한 디바이스 컨텍스트입니다.

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 클라이언트 사각형에서 아이콘을 가운데에 맞춥니다.
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 아이콘을 그립니다.
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CPaintDC dc(this); // device context for painting

		CPen pen;
		pen.CreatePen(PS_SOLID, 1, RGB(153, 153, 153));
		CPen* oldPen = dc.SelectObject(&pen);

		CBrush my_brush(RGB(255, 255, 255));
		CBrush *p = dc.SelectObject(&my_brush);

		//------1번 엘리베이터---------------------------------------------------------------------------------------------------
		//층수
		dc.Rectangle(80, 50, 380, 90);

		pen.DeleteObject();
		pen.CreatePen(PS_CLOUDFILE_PLACEHOLDER, 1, RGB(0, 0, 0));
		oldPen = dc.SelectObject(&pen);

		//엘리베이터
		dc.Rectangle(80, 90, 380, 560);

		pen.DeleteObject();
		pen.CreatePen(PS_DOT, 1, RGB(204, 204, 204));
		oldPen = dc.SelectObject(&pen);

		//선
		dc.MoveTo(230, 90);
		dc.LineTo(230, 560);

		CClientDC WinDC(this);
		CDC MemDC;
		MemDC.CreateCompatibleDC(&WinDC);

		CBitmap bitmap;
		BITMAP bitmapinfo;
		bitmap.LoadBitmapW(IDB_BITMAP1);
		bitmap.GetBitmap(&bitmapinfo);

		CBitmap *pOldBitmap = (CBitmap *)MemDC.SelectObject(&bitmap);
		WinDC.BitBlt(m_nx1_pos - 2, m_ny1_pos - 10, bitmapinfo.bmWidth, bitmapinfo.bmHeight, &MemDC, 0, 0, SRCCOPY);
		MemDC.SelectObject(pOldBitmap);

		CDialogEx::OnPaint();
	}
}

// 사용자가 최소화된 창을 끄는 동안에 커서가 표시되도록 시스템에서
//  이 함수를 호출합니다.
HCURSOR CElevator3Dlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}




void CElevator3Dlg::OnTimer(UINT_PTR nIDEvent)
{
	switch (nIDEvent)
	{
		case _TIMER_DEQUE_ISEMPTY:
		{
			if (!m_deque.empty())
			{
				//SYSTEMTIME cur_time;
				//GetLocalTime(&cur_time);
				//CTime time = CTime::GetCurrentTime();

				//m_wstrCurrentTime.Format(_T("%02d/%02d/%02d-%02d:%02d:%02d:%03ld"),
				//	cur_time.wYear,
				//	cur_time.wMonth,
				//	cur_time.wDay,
				//	cur_time.wHour,
				//	cur_time.wMinute,
				//	cur_time.wSecond,
				//	cur_time.wMilliseconds);

				DEQUE_PRINT();
				Elevator_MOVE();
				Elevator_Turn();
			}
			
			else 
			{
				
				m_listBoxMSG.AddString(m_wstrCurrentTime + _T(" 없습니다."));
				m_listBoxMSG.SetCurSel(m_listBoxMSG.GetCount() - 1);

			}
		}
		break;

		

		case _TIMER_ELEVATOR_UP:
		{
				m_nElevator += 1;
				m_ny1_pos -= 30;
				
				m_wstrElevator.Format(_T("%d"), m_nElevator);
				m_stcSTDzElevator.SetWindowTextW(m_wstrElevator);
				m_listBoxMSG.AddString(m_wstrCurrentTime + _T(" 엘리베이터이동중 : ") + m_wstrElevator);
				m_listBoxMSG.SetCurSel(m_listBoxMSG.GetCount() - 1);
				
				//m_Elevator_state = Elevator_state_UP;
				  
		}
		break;

		case _TIMER_ELEVATOR_DOWN:
		{
			m_nElevator -= 1;
			m_ny1_pos += 30;

			m_wstrElevator.Format(_T("%d"), m_nElevator);
			m_stcSTDzElevator.SetWindowTextW(m_wstrElevator);
			m_listBoxMSG.AddString(m_wstrCurrentTime + _T(" 엘리베이터이동중.") + m_wstrElevator);
			m_listBoxMSG.SetCurSel(m_listBoxMSG.GetCount() - 1);
			//m_Elevator_state = Elevator_state_DOWN;
			
		}
		break;

		case _TIMER_ELEVATOR_OPEN:
		{

			Elevator_Open(10, 10);
			
		}
		break;

		case _TIMER_ELEVATOR_CLOSE:
		{

			KillTimer(_TIMER_ELEVATOR_OPEN);
			Elevator_Close(10, 10);

		}
		break;


	}
	CDialogEx::OnTimer(nIDEvent);
	
}

void CElevator3Dlg::Elevator_Open(int x, int y)
{
	CClientDC WinDC(this);
	CDC MemDC;
	MemDC.CreateCompatibleDC(&WinDC);

	CBitmap bitmap;
	BITMAP bitmapinfo;
	bitmap.LoadBitmapW(IDB_BITMAP2);
	bitmap.GetBitmap(&bitmapinfo);

	CBitmap *pOldBitmap = (CBitmap *)MemDC.SelectObject(&bitmap);
	WinDC.BitBlt(m_nx1_pos, m_ny1_pos - 10, bitmapinfo.bmWidth, bitmapinfo.bmHeight, &MemDC, 0, 0, SRCCOPY);
	MemDC.SelectObject(pOldBitmap);
}

void CElevator3Dlg::Elevator_Close(int x, int y)
{
	CClientDC WinDC(this);
	CDC MemDC;
	MemDC.CreateCompatibleDC(&WinDC);

	CBitmap bitmap;
	BITMAP bitmapinfo;
	bitmap.LoadBitmapW(IDB_BITMAP1);
	bitmap.GetBitmap(&bitmapinfo);

	CBitmap *pOldBitmap = (CBitmap *)MemDC.SelectObject(&bitmap);
	WinDC.BitBlt(m_nx1_pos, m_ny1_pos - 10, bitmapinfo.bmWidth, bitmapinfo.bmHeight, &MemDC, 0, 0, SRCCOPY);
	MemDC.SelectObject(pOldBitmap);
}



bool compare (int x, int y)
{
	return x > y;
}

void CElevator3Dlg::DEQUE_PRINT()
{
	//for(iter= m_deque.begin(); iter!= m_deque.end(); iter++)
	for (int i = 0; i < m_deque.size(); i++)
	{
		//sort(m_deque.begin(), m_deque.end());

		//CString wstrDeque;
		
		//wstrDeque.Format(_T("%d"), m_nDestFloor);


		//중복값 제거
		//m_deque.erase(unique(m_deque.begin(), m_deque.end()), m_deque.end());

		m_nDestFloor = m_deque.at(i);
		

		//int nDeque = 0;
		CString wstrDeque;
		//nDeque = m_deque.at(i);
		wstrDeque.Format(_T("[%02d] %d"), i + 1, m_deque.at(i));
		m_listBoxMSG.AddString(m_wstrCurrentTime + _T(" ") + wstrDeque);
		m_listBoxMSG.SetCurSel(m_listBoxMSG.GetCount() - 1);


		if (m_nElevator > m_nDestFloor)
		{
			m_Elevator_state = Elevator_state_DOWN;
			m_DownDeque.push_back(m_deque.at(i));	
			sort(m_deque.begin(), m_deque.end(), compare);
				
			//m_DownDeque.erase(unique(m_DownDeque.begin(), m_DownDeque.end()), m_DownDeque.end());

			//CString wstrTXT_;
			//wstrTXT_.Format(_T("[%02d]-->[%02d]"), m_nElevator, m_nDestFloor);
			//m_listBoxMSG.AddString(wstrTXT_);
		}

		else if (m_nElevator < m_nDestFloor)
		{
			m_Elevator_state = Elevator_state_UP;
			m_UpDeque.push_back(m_deque.at(i));
			sort(m_deque.begin(), m_deque.end());
			
			
			//m_UpDeque.erase(unique(m_UpDeque.begin(), m_UpDeque.end()), m_UpDeque.end());

			//sort(m_UpDeque.begin(), m_UpDeque.end());

			
			
		}
		else 
		{
			Elevator_STOP();
			
		}

	}
}



void CElevator3Dlg::Elevator_MOVE()
{
	CPaintDC dc(this);
	
	//m_ny1_pos = 520 - ((m_nDeque - 1) * 30);
	
	if (m_Elevator_state = Elevator_state_DOWN)
	{
		KillTimer(_TIMER_ELEVATOR_UP);
		SetTimer(_TIMER_ELEVATOR_DOWN, 1 * 1000, NULL);

	}
	else  if(m_Elevator_state = Elevator_state_UP)
	{
		KillTimer(_TIMER_ELEVATOR_DOWN);
		SetTimer(_TIMER_ELEVATOR_UP, 1 * 1000, NULL);
	}
	else if (m_Elevator_state = Elevator_state_STOP)
	{
		//m_Elevator_state = Elevator_state_STOP;
		//KillTimer(_TIMER_ELEVATOR_UP);
		//KillTimer(_TIMER_ELEVATOR_DOWN);
		//Elevator_STOP();
	}
	

	InvalidateRect(CRect(00, 00, 1000, 1000));
}





void CElevator3Dlg::Elevator_STOP()
{
	CPaintDC dc(this);
	
	SetTimer(_TIMER_ELEVATOR_OPEN, 1, NULL);
	SetTimer(_TIMER_ELEVATOR_CLOSE, 500, NULL);

	m_listBoxMSG.AddString(m_wstrCurrentTime + _T(" 도착"));
	m_listBoxMSG.SetCurSel(m_listBoxMSG.GetCount() - 1);

	m_deque.pop_front();

	if (m_deque.empty())
	{
		KillTimer(_TIMER_ELEVATOR_UP);
		KillTimer(_TIMER_ELEVATOR_DOWN);
	}

	//m_nElevator = m_nDestFloor;
	
	

	//if(m_deque.at(0)==m_UpDeque.at(0))
	//{
	//	m_deque.pop_front();
	//	m_UpDeque.pop_front();
	//}
	//else if (m_deque.at(0) == m_DownDeque.at(0))
	//{
	//	m_deque.pop_front();
	//	m_DownDeque.pop_front();
	//}

	
	
	switch (m_nDestFloor) {

	case 1:

		((CButton*)GetDlgItem(IDC_CHK_BTN1))->SetCheck(0);

		break;

	case 2:

		((CButton*)GetDlgItem(IDC_CHK_BTN2))->SetCheck(0);

		break;

	case 3:

		((CButton*)GetDlgItem(IDC_CHK_BTN3))->SetCheck(0);

		break;

	case 4:

		((CButton*)GetDlgItem(IDC_CHK_BTN4))->SetCheck(0);

		break;

	case 5:

		((CButton*)GetDlgItem(IDC_CHK_BTN5))->SetCheck(0);

		break;

	case 6:

		((CButton*)GetDlgItem(IDC_CHK_BTN6))->SetCheck(0);

		break;

	case 7:

		((CButton*)GetDlgItem(IDC_CHK_BTN7))->SetCheck(0);

		break;

	case 8:

		((CButton*)GetDlgItem(IDC_CHK_BTN8))->SetCheck(0);

		break;

	case 9:

		((CButton*)GetDlgItem(IDC_CHK_BTN9))->SetCheck(0);

		break;

	case 10:

		((CButton*)GetDlgItem(IDC_CHK_BTN10))->SetCheck(0);

		break;

	case 11:

		((CButton*)GetDlgItem(IDC_CHK_BTN11))->SetCheck(0);

		break;

	case 12:

		((CButton*)GetDlgItem(IDC_CHK_BTN12))->SetCheck(0);

		break;

	case 13:

		((CButton*)GetDlgItem(IDC_CHK_BTN13))->SetCheck(0);

		break;

	case 14:

		((CButton*)GetDlgItem(IDC_CHK_BTN14))->SetCheck(0);

		break;

	case 15:

		((CButton*)GetDlgItem(IDC_CHK_BTN15))->SetCheck(0);

		break;
	}

	//DEQUE_POP();

	InvalidateRect(CRect(00, 00, 1000, 1000));
}



void CElevator3Dlg::Elevator_Turn()
{
	if (m_Elevator_state = Elevator_state_UP)
	{
		if (!m_UpDeque.empty() && m_nElevator < m_UpDeque.front())
		{
			SetTimer(_TIMER_ELEVATOR_UP, 1 * 1000, NULL);
			//m_nElevator++;
		}
		else if (!m_DownDeque.empty() && m_nElevator < m_DownDeque.back())
		{
			SetTimer(_TIMER_ELEVATOR_UP, 1 * 1000, NULL);
			//m_nElevator++;
			//m_Elevator_state = Elevator_state_DOWN;
		}
		else
		{
			m_Elevator_state = Elevator_state_STOP;


		}
	}

	else if (m_Elevator_state = Elevator_state_DOWN)
	{
		if (!m_DownDeque.empty() && m_nElevator > m_DownDeque.front())
		{
			SetTimer(_TIMER_ELEVATOR_DOWN, 1 * 1000, NULL);
			//m_nElevator--;
		}
		else if (!m_UpDeque.empty() && m_nElevator > m_UpDeque.back())
		{
			SetTimer(_TIMER_ELEVATOR_DOWN, 1 * 1000, NULL);
			//m_nElevator--;
			//m_Elevator_state = Elevator_state_UP;
		}
		else
		{
			m_Elevator_state = Elevator_state_STOP;

		}
	}

	if (m_nElevator > 14)
	{
		KillTimer(_TIMER_ELEVATOR_UP);
		SetTimer(_TIMER_ELEVATOR_DOWN, 1 * 1000, NULL);
		

	}
	else if (m_nElevator == 1)
	{
		KillTimer(_TIMER_ELEVATOR_DOWN);
		SetTimer(_TIMER_ELEVATOR_UP, 1 * 1000, NULL);
		

	}
}

void CElevator3Dlg::DEQUE_POP()
{
	m_deque.pop_front();

}

void CElevator3Dlg::OnBnClickedChkBtn1()
{
	Elevator_Turn();
	m_nValue = 1;
	m_deque.push_back(m_nValue);	
	DEQUE_PRINT();
	//Elevator_MOVE();

}


void CElevator3Dlg::OnBnClickedChkBtn2()
{
	Elevator_Turn();
	m_nValue = 2;
	m_deque.push_back(m_nValue);
	DEQUE_PRINT();
	//Elevator_MOVE();
}


void CElevator3Dlg::OnBnClickedChkBtn3()
{

	Elevator_Turn();
	m_nValue = 3;
	m_deque.push_back(m_nValue);
	DEQUE_PRINT();
	//Elevator_MOVE();
	
}


void CElevator3Dlg::OnBnClickedChkBtn4()
{

	Elevator_Turn();
	m_nValue = 4;
	m_deque.push_back(m_nValue);
	DEQUE_PRINT();
	//Elevator_MOVE();
}


void CElevator3Dlg::OnBnClickedChkBtn5()
{
	Elevator_Turn();
	m_nValue = 5; 
	m_deque.push_back(m_nValue);
	DEQUE_PRINT();
	//Elevator_MOVE();
}


void CElevator3Dlg::OnBnClickedChkBtn6()
{
	Elevator_Turn();
	m_nValue = 6; 
	m_deque.push_back(m_nValue);
	DEQUE_PRINT();
	//Elevator_MOVE();
}


void CElevator3Dlg::OnBnClickedChkBtn7()
{
	Elevator_Turn();
	m_nValue = 7;
	m_deque.push_back(m_nValue);
	DEQUE_PRINT();
	//Elevator_MOVE();
}


void CElevator3Dlg::OnBnClickedChkBtn8()
{
	Elevator_Turn();
	m_nValue = 8;
	m_deque.push_back(m_nValue);
	DEQUE_PRINT();
	//Elevator_MOVE();
}


void CElevator3Dlg::OnBnClickedChkBtn9()
{
	Elevator_Turn();
	m_nValue = 9;
	m_deque.push_back(m_nValue);
	DEQUE_PRINT();
	//Elevator_MOVE();
}


void CElevator3Dlg::OnBnClickedChkBtn10()
{
	Elevator_Turn();
	m_nValue = 10;
	m_deque.push_back(m_nValue);
	DEQUE_PRINT();
	//Elevator_MOVE();
}


void CElevator3Dlg::OnBnClickedChkBtn11()
{
	Elevator_Turn();
	m_nValue = 11;
	m_deque.push_back(m_nValue);
	DEQUE_PRINT();
	//Elevator_MOVE();
}


void CElevator3Dlg::OnBnClickedChkBtn12()
{
	Elevator_Turn();
	m_nValue = 12;
	m_deque.push_back(m_nValue);
	DEQUE_PRINT();
	//Elevator_MOVE();
}


void CElevator3Dlg::OnBnClickedChkBtn13()
{
	Elevator_Turn();
	m_nValue = 13;
	m_deque.push_back(m_nValue);
	DEQUE_PRINT();
	//Elevator_MOVE();
}


void CElevator3Dlg::OnBnClickedChkBtn14()
{
	Elevator_Turn();
	m_nValue = 14;
	m_deque.push_back(m_nValue);
	DEQUE_PRINT();
	//Elevator_MOVE();
}


void CElevator3Dlg::OnBnClickedChkBtn15()
{
	Elevator_Turn();
	m_nValue = 15;
	m_deque.push_back(m_nValue);
	DEQUE_PRINT();
	//Elevator_MOVE();
}


HBRUSH CElevator3Dlg::OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor)
{
	HBRUSH hbr = CDialogEx::OnCtlColor(pDC, pWnd, nCtlColor);

	if (pWnd->GetSafeHwnd() == GetDlgItem(IDC_STC_ELEVATOR)->m_hWnd)
	{
		pDC->SetBkMode(TRANSPARENT);
		return (HBRUSH) ::GetStockObject(NULL_BRUSH);
	}

	// TODO:  기본값이 적당하지 않으면 다른 브러시를 반환합니다.
	return hbr;
}



void CElevator3Dlg::Elevator_UP()
{
	m_nDirect  = 1;
}


void CElevator3Dlg::Elevator_DOWN()
{
	m_nDirect = -1;
}


void CElevator3Dlg::Elevator_EXIT()
{
	m_nDirect = 0;
}

